package ru.medwedSa.Java_3.Lessen_7_Reflection.ClassWork;


import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

/**
 * Аннотация.
 * Для создания аннотации весь процесс одинаков с созданием нового файла New java Class, за исключением, что после
 * написания имени класса жамкаем на Annotation. Явный признак, что перед вами аннотация - это в атрибутах класса вместо
 * public class будет public @interface и далее имя класса.
 * посмотреть и послушать -> java_3 лекция 7. 1 час 50 мин
 */
@Target({ElementType.TYPE, ElementType.METHOD}) // @Target - это то, к чему можно подключать созданную аннотацию.
                                                // В данном случае аннотация подключена к типу и к методу.
@Retention(RetentionPolicy.RUNTIME) // @Retention - это области видимости аннотаций. Их всего три варианта:
// CLASS - аннотация хранится в .class файле, но недоступна во время выполнения программы;
// RUNTIME - аннотация хранится в .class файле и доступна во время выполнения программы.
// SOURCE - аннотация доступна только в исходном коде и сбрасывается во время создания .class файла;
public @interface MyAnno { // У созданной аннотации могут быть параметры. Параметров у аннотации может быть много.
    int someParam() default 14; // И в данном примере параметром выступает int someParam(), который имеет значение по
    // умолчанию default 14, а если значение по умолчанию отсутствует, то при присвоении аннотации к методу, к классу
    // и т.д. во входящие аргументы @MyAnno( ... ) нужно добавить параметр someParam. Могут использоваться одновременно
    // оба варианта, при этом значение default будет использоваться в последнюю очередь.
}
